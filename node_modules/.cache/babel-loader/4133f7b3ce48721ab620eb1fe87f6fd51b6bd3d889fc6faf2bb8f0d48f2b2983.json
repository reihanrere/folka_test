{"ast":null,"code":"import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nexport const loginUser = createAsyncThunk(\"auth/login\", async (userData, _ref) => {\n  let {\n    rejectWithValue\n  } = _ref;\n  try {\n    var _response$data;\n    const response = await axios.post(`${process.env.REACT_APP_BASE_URL}/login`, userData);\n    const token = response.data;\n    console.log((_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.token);\n    return token;\n  } catch (error) {\n    return rejectWithValue(error.message);\n  }\n});","map":{"version":3,"names":["createAsyncThunk","axios","loginUser","userData","_ref","rejectWithValue","_response$data","response","post","process","env","REACT_APP_BASE_URL","token","data","console","log","error","message"],"sources":["/Users/reihanrenaldi/Documents/ReihanSigma/projects/react-projects/folka_test/src/redux/actions/auth/login.js"],"sourcesContent":["import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n\nexport const loginUser = createAsyncThunk(\n  \"auth/login\",\n  async (userData, { rejectWithValue }) => {\n    try {\n      const response = await axios.post(\n        `${process.env.REACT_APP_BASE_URL}/login`,\n        userData\n      );\n      const token = response.data;\n      console.log(response.data?.token);\n      return token;\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  }\n);\n"],"mappings":"AAAA,SAASA,gBAAgB,QAAQ,kBAAkB;AACnD,OAAOC,KAAK,MAAM,OAAO;AAEzB,OAAO,MAAMC,SAAS,GAAGF,gBAAgB,CACvC,YAAY,EACZ,OAAOG,QAAQ,EAAAC,IAAA,KAA0B;EAAA,IAAxB;IAAEC;EAAgB,CAAC,GAAAD,IAAA;EAClC,IAAI;IAAA,IAAAE,cAAA;IACF,MAAMC,QAAQ,GAAG,MAAMN,KAAK,CAACO,IAAI,CAC9B,GAAEC,OAAO,CAACC,GAAG,CAACC,kBAAmB,QAAO,EACzCR,QACF,CAAC;IACD,MAAMS,KAAK,GAAGL,QAAQ,CAACM,IAAI;IAC3BC,OAAO,CAACC,GAAG,EAAAT,cAAA,GAACC,QAAQ,CAACM,IAAI,cAAAP,cAAA,uBAAbA,cAAA,CAAeM,KAAK,CAAC;IACjC,OAAOA,KAAK;EACd,CAAC,CAAC,OAAOI,KAAK,EAAE;IACd,OAAOX,eAAe,CAACW,KAAK,CAACC,OAAO,CAAC;EACvC;AACF,CACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}